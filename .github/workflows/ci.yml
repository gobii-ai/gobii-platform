name: CI

on:
  pull_request:
  push:
    branches: [main]

# Auto-cancel previous runs on the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Needed for posting test summaries/annotations
permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      # Ensure Django loads test settings; manage.py still imports config.settings first
      DJANGO_SETTINGS_MODULE: config.test_settings
      PYTHONUNBUFFERED: "1"
      TEST_OUTPUT_DIR: test-results

      # Satisfy config.settings import before test settings override DB to SQLite
      DJANGO_SECRET_KEY: test-secret
      GOBII_ENCRYPTION_KEY: dummy-encryption-key-for-testing
      POSTGRES_DB: test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_HOST: localhost
      POSTGRES_PORT: "5432"
      REDIS_URL: redis://localhost:6379/0

      # Satisfy LLM fail-fast check; any one provider key is enough
      OPENAI_API_KEY: dummy
      # Disable Celery worker self-shutdown logic in tests to avoid interfering with CI runner
      BROWSER_USE_TASK_MAX_COUNT: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up uv (with cache)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          ignore-nothing-to-cache: true

      # Install dependencies into a project venv using uv, leveraging cache.
      # Prefer lockfile if present; otherwise resolve from pyproject.
      - name: Sync deps (locked)
        if: ${{ hashFiles('uv.lock') != '' }}
        run: |
          uv sync --python 3.12 --frozen --all-extras --dev

      - name: Sync deps (no lock)
        if: ${{ hashFiles('uv.lock') == '' }}
        run: |
          echo "No uv.lock found; resolving from pyproject.toml"
          uv sync --python 3.12 --all-extras --dev

      - name: Add JUnit test runner to venv
        run: |
          uv run python -m pip install -q unittest-xml-reporting

      - name: Run a single test file (smoke)
        run: |
          set -euo pipefail
          mkdir -p "$TEST_OUTPUT_DIR"
          # Choose a small, reliable test to validate CI plumbing
          LABEL="tests.unit.test_api_webhooks.EmailWebhookTest.test_email_from_owner_is_accepted"
          echo "Running single test: $LABEL"
          uv run python manage.py test "$LABEL" \
            --settings=config.test_settings \
            --parallel 1 \
            --testrunner=xmlrunner.extra.djangotestrunner.XMLTestRunner
          # Collect any stray TEST-*.xml files into the output dir
          shopt -s nullglob || true
          for f in TEST-*.xml; do mv "$f" "$TEST_OUTPUT_DIR/"; done || true

      - name: Publish test results to PR
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            test-results/**/*.xml
            TEST-*.xml
          check_name: "Test Results"
          comment_mode: off
