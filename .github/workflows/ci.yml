name: CI

on:
  pull_request:
  push:
    branches: [main]

# Auto-cancel previous runs on the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Needed for posting test summaries/annotations
permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  tests:
    name: tests (shard ${{ matrix.shard_index }}/${{ matrix.total_shards }})
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        total_shards: [8]
        shard_index: [0, 1, 2, 3, 4, 5, 6, 7]
    env:
      # Ensure Django loads test settings; manage.py still imports config.settings first
      DJANGO_SETTINGS_MODULE: config.test_settings
      PYTHONUNBUFFERED: "1"
      TEST_OUTPUT_DIR: test-results

      # Satisfy config.settings import before test settings override DB to SQLite
      DJANGO_SECRET_KEY: test-secret
      GOBII_ENCRYPTION_KEY: dummy-encryption-key-for-testing
      POSTGRES_DB: test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_HOST: localhost
      POSTGRES_PORT: "5432"
      REDIS_URL: redis://localhost:6379/0

      # Satisfy LLM fail-fast check; any one provider key is enough
      OPENAI_API_KEY: dummy
      # Disable Celery worker self-shutdown logic in tests to avoid interfering with CI runner
      BROWSER_USE_TASK_MAX_COUNT: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up uv (with cache)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          ignore-nothing-to-cache: true

      # Install dependencies into a project venv using uv, leveraging cache.
      # Prefer lockfile if present; otherwise resolve from pyproject.
      - name: Sync deps (locked)
        if: ${{ hashFiles('uv.lock') != '' }}
        run: |
          uv sync --python 3.12 --frozen --all-extras --dev

      - name: Sync deps (no lock)
        if: ${{ hashFiles('uv.lock') == '' }}
        run: |
          echo "No uv.lock found; resolving from pyproject.toml"
          uv sync --python 3.12 --all-extras --dev

      - name: Add JUnit test runner to venv
        run: |
          uv run python -m pip install -q unittest-xml-reporting

      - name: Select tests for shard
        id: select
        run: |
          python - << 'PY'
          import glob, os, sys
          total = int(os.environ.get('TOTAL_SHARDS', '1'))
          index = int(os.environ.get('SHARD_INDEX', '0'))
          files = sorted(glob.glob('tests/unit/test_*.py'))
          print(f"Found {len(files)} test files total; selecting shard {index} of {total}", file=sys.stderr)
          labels = []
          for i, f in enumerate(files):
              if i % total == index:
                  mod = f[:-3].replace('/', '.')
                  labels.append(mod)
          with open('selected-tests.txt', 'w') as fh:
              fh.write('\n'.join(labels))
          print(f"Selected {len(labels)} labels:", file=sys.stderr)
          for line in labels[:200]:
              print(line, file=sys.stderr)
          PY
        env:
          TOTAL_SHARDS: ${{ matrix.total_shards }}
          SHARD_INDEX: ${{ matrix.shard_index }}

      - name: Run Django tests (JUnit XML)
        run: |
          set -euo pipefail
          mkdir -p "$TEST_OUTPUT_DIR"
          if [[ ! -s selected-tests.txt ]]; then
            echo "No tests in this shard; exiting successfully."
            exit 0
          fi
          # Read labels into an array safely
          mapfile -t LABELS < selected-tests.txt
          uv run python manage.py test "${LABELS[@]}" \
            --settings=config.test_settings \
            --parallel auto \
            --testrunner=xmlrunner.extra.djangotestrunner.XMLTestRunner
          # Some versions of xmlrunner write TEST-*.xml to CWD even when TEST_OUTPUT_DIR is set.
          # Collect those into the output directory so the publisher finds them.
          shopt -s nullglob || true
          for f in TEST-*.xml; do mv "$f" "$TEST_OUTPUT_DIR/"; done || true

      - name: Publish test results to PR
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            test-results/**/*.xml
            TEST-*.xml
          check_name: "Test Results (shard ${{ matrix.shard_index }}/${{ matrix.total_shards }})"
          comment_mode: off
