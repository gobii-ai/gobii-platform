services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-gobii}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 3s

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9090"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "9000:9000"
      - "9090:9090"
    volumes:
      - minio-data:/data

  precheck-llm-keys:
    image: busybox:1.36
    environment:
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
    command: >-
      sh -c 'if [ -n "$GOOGLE_API_KEY" ] || [ -n "$ANTHROPIC_API_KEY" ] || [ -n "$OPENAI_API_KEY" ] || [ -n "$OPENROUTER_API_KEY" ]; then echo "LLM key(s) detected. Continuing."; else echo "Error: No LLM provider key set. Set one of GOOGLE_API_KEY, ANTHROPIC_API_KEY, OPENAI_API_KEY, or OPENROUTER_API_KEY and rerun." >&2; exit 1; fi'

  web:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-insecure}
      GOBII_ENCRYPTION_KEY: ${GOBII_ENCRYPTION_KEY:-dev-insecure}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-gobii}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
      REDIS_URL: redis://redis:6379/0
      XDG_DATA_HOME: /tmp/.chrome
      XDG_CONFIG_HOME: /tmp/.chrome
      XDG_CACHE_HOME: /tmp/.chrome
    ports:
      - "8000:8000"
    depends_on:
      precheck-llm-keys:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    restart: unless-stopped
    command: >-
      bash -lc "python manage.py migrate --noinput && python manage.py create_initial_superuser && gunicorn config.wsgi:application --bind 0.0.0.0:8000"

  flower:
    image: mher/flower:2.0
    command: celery flower --broker=redis://redis:6379/0 --port=${FLOWER_PORT:-5555}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    depends_on:
      - redis
    restart: unless-stopped
    profiles: ["obs"]

# --------------------------------------------------------------------- #
#  Optional Celery worker (disabled unless profile "worker" is enabled)
# --------------------------------------------------------------------- #
  worker:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./docker/Dockerfile  # relative to platform directory
    command: celery -A config worker -l info
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-insecure}
      GOBII_ENCRYPTION_KEY: ${GOBII_ENCRYPTION_KEY:-dev-insecure}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-gobii}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      REDIS_URL: redis://redis:6379/0
      XDG_DATA_HOME: /tmp/.chrome
      XDG_CONFIG_HOME: /tmp/.chrome
      XDG_CACHE_HOME: /tmp/.chrome
    depends_on:
      precheck-llm-keys:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    shm_size: 2gb

  # --------------------------------------------------------------------- #
  #  Optional Celery beat scheduler (disabled unless profile "beat" is enabled)
  # --------------------------------------------------------------------- #
  beat:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    command: >
      celery -A config beat --loglevel=info --scheduler=redbeat.RedBeatScheduler
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-insecure}
      GOBII_ENCRYPTION_KEY: ${GOBII_ENCRYPTION_KEY:-dev-insecure}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-gobii}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      REDIS_URL: redis://redis:6379/0
      XDG_DATA_HOME: /tmp/.chrome
      XDG_CONFIG_HOME: /tmp/.chrome
      XDG_CACHE_HOME: /tmp/.chrome
    depends_on:
      precheck-llm-keys:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    shm_size: 2gb

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.128.0
    command: [ "--config=/etc/otel/config.yaml" ]
    volumes:
      - ./docker/otel-collector-config.yaml:/etc/otel/config.yaml
    ports:
      - "4317:4317"    # gRPC OTLP
      - "4318:4318"    # HTTP OTLP
      - "55679:55679"  # tracer
    environment:
      GRAFANA_CLOUD_OTLP_ENDPOINT: ${GRAFANA_CLOUD_OTLP_ENDPOINT:-}
      GRAFANA_CLOUD_INSTANCE_ID: ${GRAFANA_CLOUD_INSTANCE_ID:-}
      GRAFANA_CLOUD_API_KEY: ${GRAFANA_CLOUD_API_KEY:-}
    profiles: ["obs"]

volumes:
  db-data:
  minio-data:
