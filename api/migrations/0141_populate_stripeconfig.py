# Generated by Django 5.2 on 2025-09-22 15:23

from django.conf import settings
from django.db import migrations


PLACEHOLDER_SECRETS = {
    "<your secret key>",
    "",
    None,
}


def _encrypt_optional(value: str | None):
    if value in PLACEHOLDER_SECRETS:
        return None
    try:
        from api.encryption import SecretsEncryption

        return SecretsEncryption.encrypt_value(value)
    except Exception:
        return None


def populate_stripe_config(apps, schema_editor):
    StripeConfig = apps.get_model('api', 'StripeConfig')

    release_env = getattr(settings, 'GOBII_RELEASE_ENV', 'local')
    if StripeConfig.objects.filter(release_env=release_env).exists():
        return

    config = StripeConfig(
        release_env=release_env,
        live_mode=getattr(settings, 'STRIPE_LIVE_MODE', False),
        startup_price_id=getattr(settings, 'STRIPE_STARTUP_PRICE_ID', ''),
        startup_additional_task_price_id=getattr(settings, 'STRIPE_STARTUP_ADDITIONAL_TASK_PRICE_ID', ''),
        startup_product_id=getattr(settings, 'STRIPE_STARTUP_PRODUCT_ID', ''),
        org_team_product_id=getattr(settings, 'STRIPE_ORG_TEAM_PRODUCT_ID', ''),
        task_meter_id=getattr(settings, 'STRIPE_TASK_METER_ID', ''),
        task_meter_event_name=getattr(settings, 'STRIPE_TASK_METER_EVENT_NAME', ''),
        org_task_meter_id=getattr(settings, 'STRIPE_ORG_TASK_METER_ID', ''),
    )

    config.live_secret_key_encrypted = _encrypt_optional(getattr(settings, 'STRIPE_LIVE_SECRET_KEY', None))
    config.test_secret_key_encrypted = _encrypt_optional(getattr(settings, 'STRIPE_TEST_SECRET_KEY', None))
    config.webhook_secret_encrypted = _encrypt_optional(getattr(settings, 'STRIPE_WEBHOOK_SECRET', None))

    config.save()


def delete_stripe_config(apps, schema_editor):
    StripeConfig = apps.get_model('api', 'StripeConfig')
    release_env = getattr(settings, 'GOBII_RELEASE_ENV', 'local')
    StripeConfig.objects.filter(release_env=release_env).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0140_stripeconfig'),
    ]

    operations = [
        migrations.RunPython(populate_stripe_config, delete_stripe_config, elidable=True),
    ]
