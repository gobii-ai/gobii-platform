#!/usr/bin/env python3
"""Generate runtime secrets/config for OSS self-host deployments.

This script is idempotent: if files already exist, it keeps their values but
adds any new keys that may have been introduced in updates.
"""

from __future__ import annotations

import os
import secrets
from pathlib import Path
from typing import Dict

CONFIG_DIR = Path(os.environ.get("BOOTSTRAP_CONFIG_DIR", "/config"))
CONFIG_DIR.mkdir(parents=True, exist_ok=True)

POSTGRES_USER = os.environ.get("POSTGRES_USER", "gobii")
POSTGRES_DB = os.environ.get("POSTGRES_DB", "gobii")
POSTGRES_PASSWORD_ENV = os.environ.get("POSTGRES_PASSWORD")
DJANGO_SECRET_KEY_ENV = os.environ.get("DJANGO_SECRET_KEY")
GOBII_ENCRYPTION_KEY_ENV = os.environ.get("GOBII_ENCRYPTION_KEY")
MINIO_PREFIX = os.environ.get("MINIO_ROOT_USER_PREFIX", "gobii")


def _ensure_file(path: Path, value: str) -> str:
    if path.exists():
        return path.read_text().strip()
    path.write_text(value + "\n")
    os.chmod(path, 0o600)
    return value


def _load_env(path: Path) -> Dict[str, str]:
    data: Dict[str, str] = {}
    if not path.exists():
        return data
    for raw_line in path.read_text().splitlines():
        line = raw_line.strip()
        if not line or line.startswith("#"):
            continue
        if "=" not in line:
            continue
        key, val = line.split("=", 1)
        data[key.strip()] = val.strip()
    return data


def _write_env(path: Path, data: Dict[str, str]) -> None:
    lines = ["# Autogenerated by docker/bootstrap/runtime_env.py" ,
             "# Safe to edit manually; reruns will preserve existing keys."]
    for key, val in data.items():
        lines.append(f"{key}={val}")
    path.write_text("\n".join(lines) + "\n")
    os.chmod(path, 0o600)


def _random_token(length: int = 48) -> str:
    # token_urlsafe can exceed requested length; trim while keeping entropy.
    return secrets.token_urlsafe(length)[:length]


# ---- Database secrets ----
postgres_password = _ensure_file(CONFIG_DIR / "postgres-password", POSTGRES_PASSWORD_ENV or _random_token(48))

# ---- MinIO secrets ----
minio_user_default = f"{MINIO_PREFIX}-{secrets.token_hex(4)}"
minio_user = _ensure_file(CONFIG_DIR / "minio-root-user", os.environ.get("MINIO_ROOT_USER", minio_user_default))
minio_password = _ensure_file(CONFIG_DIR / "minio-root-password", os.environ.get("MINIO_ROOT_PASSWORD", _random_token(48)))

# ---- Django/application env ----
django_env_path = CONFIG_DIR / "django.env"
current_env = _load_env(django_env_path)

defaults = {
    "DJANGO_SETTINGS_MODULE": "config.settings",
    "GOBII_RELEASE_ENV": "oss",
    "DEBUG": "0",
    "DJANGO_SECRET_KEY": current_env.get("DJANGO_SECRET_KEY", DJANGO_SECRET_KEY_ENV or _random_token(64)),
    "GOBII_ENCRYPTION_KEY": current_env.get("GOBII_ENCRYPTION_KEY", GOBII_ENCRYPTION_KEY_ENV or _random_token(64)),
    "POSTGRES_HOST": current_env.get("POSTGRES_HOST", "db"),
    "POSTGRES_PORT": current_env.get("POSTGRES_PORT", "5432"),
    "POSTGRES_DB": current_env.get("POSTGRES_DB", POSTGRES_DB),
    "POSTGRES_USER": current_env.get("POSTGRES_USER", POSTGRES_USER),
    "POSTGRES_PASSWORD": current_env.get("POSTGRES_PASSWORD", postgres_password),
    "REDIS_URL": current_env.get("REDIS_URL", "redis://redis:6379/0"),
    "CELERY_BROKER_URL": current_env.get("CELERY_BROKER_URL", "redis://redis:6379/0"),
    "CELERY_RESULT_BACKEND": current_env.get("CELERY_RESULT_BACKEND", "redis://redis:6379/0"),
    "MEDIA_ROOT": current_env.get("MEDIA_ROOT", "/app/mediafiles"),
    "STATIC_ROOT": current_env.get("STATIC_ROOT", "/app/staticfiles"),
    "MINIO_ROOT_USER": current_env.get("MINIO_ROOT_USER", minio_user),
    "MINIO_ROOT_PASSWORD": current_env.get("MINIO_ROOT_PASSWORD", minio_password),
}

if current_env != defaults:
    _write_env(django_env_path, defaults)
else:
    # Ensure perms even if untouched
    os.chmod(django_env_path, 0o600)

print("Runtime configuration available at", CONFIG_DIR)
